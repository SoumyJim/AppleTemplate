// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aKe88PuX3H94mH1Pri1oSB
// Component: bFN8a6cYRe-h
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import NavItem from "../../NavItem"; // plasmic-import: 68fANz1vVRKh/component
import NavItemDetails from "../../NavItemDetails"; // plasmic-import: U0ox7KB6ydlR/component
import ProductDisplay from "../../ProductDisplay"; // plasmic-import: EX1oHvd8f4PW/component
import Button from "../../Button"; // plasmic-import: AFYEhIL9o-Lr/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import FooterLinksGroupMobile from "../../FooterLinksGroupMobile"; // plasmic-import: 3jaMb714ZWaR/component
import { useScreenVariants as useScreenVariantsic20Cuz9FHa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: IC_20cuz9fHa/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: aKe88PuX3H94mH1Pri1oSB/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: bFN8a6cYRe-h/css
import BaselineAppleSvgIcon from "./icons/PlasmicIcon__BaselineAppleSvg"; // plasmic-import: Nq5iiN0icHus/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 793Am7SMofmb/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: Xqbu6g-vr7JK/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: pg-DC9LKjPWL/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 3weH9P_Pyhmk/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: snbaoxglxubb/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: EGyR_f41u9Lh/icon
import heroMacbookAir15MidnightCt0PgwizvreeMediumtall2XJpgAtJpmXuSdwOe from "./images/heroMacbookAir15MidnightCt0PgwizvreeMediumtall2XJpg.jpg"; // plasmic-import: atJPMXuSdwOE/picture
import heroMacbookAir15MidnightCt0PgwizvreeSmallJpg6Q9Md1E8DaO from "./images/heroMacbookAir15MidnightCt0PgwizvreeSmallJpg.jpg"; // plasmic-import: 6q9-md1E8DaO/picture
import promoBts2023StartframeExvt2T1IuxmeLarge2XJpgVDmo5XMlydL5 from "./images/promoBts2023StartframeExvt2T1IuxmeLarge2XJpg.jpg"; // plasmic-import: vDMO5XMlydL5/picture
import promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XJpg32XGlN8Cqwfn from "./images/promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XJpg.jpg"; // plasmic-import: 32xGlN8CQWFN/picture
import promoAppleVisionProF4V4Zp0Sum2YLarge2XJpgI8TxVuIHlTwx from "./images/promoAppleVisionProF4V4Zp0Sum2YLarge2XJpg.jpg"; // plasmic-import: i8TxVuIHlTwx/picture
import iphoneTradeinPromoD5Au3Rkw5KuqLarge2XJpgO21UA7G6MT5 from "./images/iphoneTradeinPromoD5Au3Rkw5KuqLarge2XJpg.jpg"; // plasmic-import: o21uA7g6mT5_/picture
import promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XJpgAe1Fwc0Imxv from "./images/promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XJpg.jpg"; // plasmic-import: ae1Fwc-0IMXV/picture
import tileCauwwcyyn9HyLarge2X1JpgIsRbX1CjEe from "./images/tileCauwwcyyn9HyLarge2X1Jpg.jpg"; // plasmic-import: IsRB_-X1cjEE/picture

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsic20Cuz9FHa()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames(projectcss.all, sty.navBar)}
          >
            <div
              data-plasmic-name={"logoContainer"}
              data-plasmic-override={overrides.logoContainer}
              className={classNames(projectcss.all, sty.logoContainer)}
            >
              <NavItem
                className={classNames("__wab_instance", sty.navItem__kr6Xo)}
                hasIconOnly={true}
                icon={
                  <BaselineAppleSvgIcon
                    data-plasmic-name={"icon"}
                    data-plasmic-override={overrides.icon}
                    className={classNames(projectcss.all, sty.icon)}
                    role={"img"}
                  />
                }
                text={""}
              />
            </div>
            <div
              data-plasmic-name={"navItems"}
              data-plasmic-override={overrides.navItems}
              className={classNames(projectcss.all, sty.navItems)}
            >
              <NavItem
                className={classNames("__wab_instance", sty.navItem__lPXfw)}
                icon={
                  <BaselineAppleSvgIcon
                    className={classNames(projectcss.all, sty.svg__t3Duu)}
                    role={"img"}
                  />
                }
                text={"Mac"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__cUxxD)}
                icon={null}
                text={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l2T1P
                    )}
                  >
                    {"Store"}
                  </div>
                }
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem___9Can1)}
                text={"iPhone"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__jmSwh)}
                text={"Watch"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__ibBwU)}
                text={"Vision"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__ag1Ov)}
                text={"AirPods"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem___8DRi7)}
                text={"TV & Home"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__zyXfu)}
                text={"Entertainment"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__zMest)}
                text={"Accessories"}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__ywxNr)}
                text={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iby5L
                    )}
                  >
                    {"Support"}
                  </div>
                }
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__embgG)}
                hasIconOnly={true}
                icon={
                  <Icon2Icon
                    data-plasmic-name={"icon10"}
                    data-plasmic-override={overrides.icon10}
                    className={classNames(projectcss.all, sty.icon10)}
                    role={"img"}
                  />
                }
                text={null}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__dl28B)}
                hasIconOnly={true}
                icon={
                  <Icon5Icon
                    data-plasmic-name={"icon11"}
                    data-plasmic-override={overrides.icon11}
                    className={classNames(projectcss.all, sty.icon11)}
                    role={"img"}
                  />
                }
                text={""}
              />

              <NavItem
                className={classNames("__wab_instance", sty.navItem__vuc3U)}
                hasIconOnly={true}
                icon={
                  <Icon7Icon
                    data-plasmic-name={"icon30"}
                    data-plasmic-override={overrides.icon30}
                    className={classNames(projectcss.all, sty.icon30)}
                    role={"img"}
                  />
                }
                text={""}
              />
            </div>
          </div>
          <NavItemDetails
            data-plasmic-name={"navItemDetails"}
            data-plasmic-override={overrides.navItemDetails}
            className={classNames("__wab_instance", sty.navItemDetails)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__adBRx)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__iHpGq
              )}
              imageSmallSrc={{
                src: heroMacbookAir15MidnightCt0PgwizvreeSmallJpg6Q9Md1E8DaO,
                fullWidth: 734,
                fullHeight: 548,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: heroMacbookAir15MidnightCt0PgwizvreeMediumtall2XJpgAtJpmXuSdwOe,
                fullWidth: 2136,
                fullHeight: 1388,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__kMrk)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon12"}
                        data-plasmic-override={overrides.icon12}
                        className={classNames(projectcss.all, sty.icon12)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__ue4Oy)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon13"}
                        data-plasmic-override={overrides.icon13}
                        className={classNames(projectcss.all, sty.icon13)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Buy"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {'Macbook Air 15"'}
                </h2>
              }
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vEWwu)}
          >
            <ProductDisplay
              className={classNames("__wab_instance", sty.productDisplay__nW0R)}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j7WAv
                  )}
                >
                  {"Plus get a gift card up to $150."}
                </div>
              }
              imageSmallSrc={{
                src: promoBts2023StartframeExvt2T1IuxmeLarge2XJpgVDmo5XMlydL5,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoBts2023StartframeExvt2T1IuxmeLarge2XJpgVDmo5XMlydL5,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__y420I)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon18"}
                        data-plasmic-override={overrides.icon18}
                        className={classNames(projectcss.all, sty.icon18)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button___0P4VT)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon19"}
                        data-plasmic-override={overrides.icon19}
                        className={classNames(projectcss.all, sty.icon19)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Buy"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={"Save on Mac or iPad \nfor college"}
            />

            <ProductDisplay
              className={classNames("__wab_instance", sty.productDisplay___374)}
              dark={true}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s7OaB
                  )}
                >
                  {"A healthy leap ahead."}
                </div>
              }
              imageSmallSrc={{
                src: promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XJpg32XGlN8Cqwfn,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoAppleWatchSeries8SpringD9Hfvufh7HyuLarge2XJpg32XGlN8Cqwfn,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__lW8Ak)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon20"}
                        data-plasmic-override={overrides.icon20}
                        className={classNames(projectcss.all, sty.icon20)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kalxh
                        )}
                      >
                        {"Learn More"}
                      </div>
                    }
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__uFdNy)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon21"}
                        data-plasmic-override={overrides.icon21}
                        className={classNames(projectcss.all, sty.icon21)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jr4Y
                        )}
                      >
                        {"Buy"}
                      </div>
                    }
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={
                <div className={classNames(projectcss.all, sty.freeBox__dh6Rj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vxNzX)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__tSwAu)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j2ETh
                      )}
                    >
                      {"WATCH"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qJ3
                    )}
                  >
                    {"SERIES 8"}
                  </div>
                </div>
              }
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ryxRr)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__s4Kqy
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hYkZ5
                  )}
                >
                  {"Welcome to the era of \nspatial computing."}
                </div>
              }
              imageSmallSrc={{
                src: promoAppleVisionProF4V4Zp0Sum2YLarge2XJpgI8TxVuIHlTwx,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoAppleVisionProF4V4Zp0Sum2YLarge2XJpgI8TxVuIHlTwx,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <Button
                  className={classNames("__wab_instance", sty.button__lqfQp)}
                  iconLeft={
                    <Icon6Icon
                      data-plasmic-name={"icon22"}
                      data-plasmic-override={overrides.icon22}
                      className={classNames(projectcss.all, sty.icon22)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"Learn More"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              }
              reverse={true}
              title={
                <div className={classNames(projectcss.all, sty.freeBox__vT5Di)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__gfaK4)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n7Hji
                    )}
                  >
                    {"Vision Pro"}
                  </div>
                </div>
              }
            />

            <ProductDisplay
              className={classNames("__wab_instance", sty.productDisplay__zlEm)}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sy83S
                  )}
                >
                  {"Upgrade and save. It's that easy."}
                </div>
              }
              imageSmallSrc={{
                src: iphoneTradeinPromoD5Au3Rkw5KuqLarge2XJpgO21UA7G6MT5,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: iphoneTradeinPromoD5Au3Rkw5KuqLarge2XJpgO21UA7G6MT5,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <Button
                  className={classNames("__wab_instance", sty.button___1Um42)}
                  iconLeft={
                    <Icon6Icon
                      data-plasmic-name={"icon24"}
                      data-plasmic-override={overrides.icon24}
                      className={classNames(projectcss.all, sty.icon24)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"See what your device is worth"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              }
              title={
                <div className={classNames(projectcss.all, sty.freeBox__a1Gt)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__wyDzd)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eXirU
                    )}
                  >
                    {"Trade In"}
                  </div>
                </div>
              }
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5Wvrv)}
          >
            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay__kKrZy
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5O3GA
                  )}
                >
                  {"64 matches. 32 teams.\nOne place to follow every goal."}
                </div>
              }
              imageSmallSrc={{
                src: promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XJpgAe1Fwc0Imxv,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: promoAppleNewsWomensWorldCupF72J3GrkhguqLarge2XJpgAe1Fwc0Imxv,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <Button
                  className={classNames("__wab_instance", sty.button__vr0UD)}
                  iconLeft={
                    <Icon9Icon
                      data-plasmic-name={"icon26"}
                      data-plasmic-override={overrides.icon26}
                      className={classNames(projectcss.all, sty.icon26)}
                      role={"img"}
                    />
                  }
                  size={"large"}
                  text={"Follow the women's tournament"}
                  type={"link"}
                  withIcons={["withSuffixIcon"]}
                />
              }
              title={
                <div className={classNames(projectcss.all, sty.freeBox__knPdO)}>
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__jYuc6)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pbBim
                    )}
                  >
                    {"News"}
                  </div>
                </div>
              }
            />

            <ProductDisplay
              className={classNames(
                "__wab_instance",
                sty.productDisplay___2WfzG
              )}
              description={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rng7F
                  )}
                >
                  {"Get up to 3% Daily Cash back\nwith every purchase."}
                </div>
              }
              imageSmallSrc={{
                src: tileCauwwcyyn9HyLarge2X1JpgIsRbX1CjEe,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              imageSrc={{
                src: tileCauwwcyyn9HyLarge2X1JpgIsRbX1CjEe,
                fullWidth: 2524,
                fullHeight: 1160,
                aspectRatio: undefined
              }}
              isMobileView={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              links={
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button__muflU)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon28"}
                        data-plasmic-override={overrides.icon28}
                        className={classNames(projectcss.all, sty.icon28)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Learn More"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__d6SK)}
                    iconLeft={
                      <Icon6Icon
                        data-plasmic-name={"icon29"}
                        data-plasmic-override={overrides.icon29}
                        className={classNames(projectcss.all, sty.icon29)}
                        role={"img"}
                      />
                    }
                    size={"large"}
                    text={"Apply Now"}
                    type={"link"}
                    withIcons={["withSuffixIcon"]}
                  />
                </React.Fragment>
              }
              title={
                <div
                  className={classNames(projectcss.all, sty.freeBox___837Al)}
                >
                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__keAzc)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__omVl
                    )}
                  >
                    {"Card"}
                  </div>
                </div>
              }
            />
          </Stack__>
          <CmsQueryRepeater
            className={classNames("__wab_instance", sty.cmsDataFetcher__mMyUk)}
            desc={true}
            emptyMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cBxWf
                    )}
                  >
                    {"No matching published entries found."}
                  </div>
                )}
              </DataCtxReader__>
            }
            forceEmptyState={false}
            forceLoadingState={false}
            limit={0}
            loadingMessage={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dDmUi
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
            noAutoRepeat={true}
            noLayout={true}
            table={"movie"}
            useDraft={false}
          >
            <DataCtxReader__>
              {$ctx =>
                (() => {
                  const child$Props = {
                    autoplay: true,
                    beforeChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ),
                    children: null,
                    className: classNames("__wab_instance", sty.sliderCarousel),
                    dots: true,
                    fade: true,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel__slider"],
                    slidesPerRow: 1,
                    slidesToScroll: 2,
                    slidesToShow: 2,
                    swipeToSlide: true
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel.currentSlide"
                      }
                    ],

                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel"}
                      data-plasmic-override={overrides.sliderCarousel}
                      {...child$Props}
                    />
                  );
                })()
              }
            </DataCtxReader__>
          </CmsQueryRepeater>
          <footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <CmsQueryRepeater
              className={classNames(
                "__wab_instance",
                sty.cmsDataFetcher__hmcO6
              )}
              desc={false}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zxOa9
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0}
              loadingMessage={null}
              noAutoRepeat={true}
              noLayout={true}
              useDraft={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zqtY)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx.plasmicCmsFooterLinksCollection;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <FooterLinksGroupMobile
                          data-plasmic-name={"footerLinksGroupMobile"}
                          data-plasmic-override={
                            overrides.footerLinksGroupMobile
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.footerLinksGroupMobile
                          )}
                          expanded={undefined}
                          groupName={
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.data.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          }
                          key={currentIndex}
                          links={(() => {
                            try {
                              return currentItem.data.links;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                )}
              </DataCtxReader__>
            </CmsQueryRepeater>
          </footer>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "logoContainer",
    "icon",
    "navItems",
    "icon10",
    "icon11",
    "icon30",
    "navItemDetails",
    "h2",
    "icon12",
    "icon13",
    "icon18",
    "icon19",
    "icon20",
    "icon21",
    "icon22",
    "icon24",
    "icon26",
    "icon28",
    "icon29",
    "sliderCarousel",
    "footer",
    "footerLinksGroupMobile"
  ],

  navBar: [
    "navBar",
    "logoContainer",
    "icon",
    "navItems",
    "icon10",
    "icon11",
    "icon30"
  ],

  logoContainer: ["logoContainer", "icon"],
  icon: ["icon"],
  navItems: ["navItems", "icon10", "icon11", "icon30"],
  icon10: ["icon10"],
  icon11: ["icon11"],
  icon30: ["icon30"],
  navItemDetails: ["navItemDetails"],
  h2: ["h2"],
  icon12: ["icon12"],
  icon13: ["icon13"],
  icon18: ["icon18"],
  icon19: ["icon19"],
  icon20: ["icon20"],
  icon21: ["icon21"],
  icon22: ["icon22"],
  icon24: ["icon24"],
  icon26: ["icon26"],
  icon28: ["icon28"],
  icon29: ["icon29"],
  sliderCarousel: ["sliderCarousel"],
  footer: ["footer", "footerLinksGroupMobile"],
  footerLinksGroupMobile: ["footerLinksGroupMobile"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    logoContainer: makeNodeComponent("logoContainer"),
    icon: makeNodeComponent("icon"),
    navItems: makeNodeComponent("navItems"),
    icon10: makeNodeComponent("icon10"),
    icon11: makeNodeComponent("icon11"),
    icon30: makeNodeComponent("icon30"),
    navItemDetails: makeNodeComponent("navItemDetails"),
    h2: makeNodeComponent("h2"),
    icon12: makeNodeComponent("icon12"),
    icon13: makeNodeComponent("icon13"),
    icon18: makeNodeComponent("icon18"),
    icon19: makeNodeComponent("icon19"),
    icon20: makeNodeComponent("icon20"),
    icon21: makeNodeComponent("icon21"),
    icon22: makeNodeComponent("icon22"),
    icon24: makeNodeComponent("icon24"),
    icon26: makeNodeComponent("icon26"),
    icon28: makeNodeComponent("icon28"),
    icon29: makeNodeComponent("icon29"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    footer: makeNodeComponent("footer"),
    footerLinksGroupMobile: makeNodeComponent("footerLinksGroupMobile"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
